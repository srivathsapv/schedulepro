/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package schedulepro;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Sasi Praveen
 */
public class ViewBookingDetailsForm extends javax.swing.JFrame {

    /**
     * Creates new form ViewBookingDetailsForm1
     */
    public ViewBookingDetailsForm() throws SQLException {
        initComponents();
        bookingDetailsTable.setModel(new BookingTableModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookingDetailsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SchedulePro - Booking Details");
        setResizable(false);

        bookingDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        bookingDetailsTable.setShowHorizontalLines(false);
        bookingDetailsTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(bookingDetailsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ViewBookingDetailsForm().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookingDetailsTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class BookingTableModel extends AbstractTableModel {
    private String[] columnNames = {"Name of the Bookie", "Year", "Section", "Room No.", "Day", "From", "To", "Status"};
    private Object[][] data;
    private boolean status;
    private int[] issueIds;
    
    public BookingTableModel() throws SQLException{
        
        String query = "SELECT * FROM equipmentissue WHERE equipId = " + EquipmentViewForm.equipmentId;
        ResultSet rs = Utilfunctions.executeQuery(query);

        int cnt = 0;
        while(rs.next())
            cnt++;
        data = new Object[cnt][8];
        issueIds = new int[cnt];
        query = "SELECT * FROM `equipmentissue` WHERE `equipId`=" + EquipmentViewForm.equipmentId;
        ResultSet result = Utilfunctions.executeQuery(query);
        
        ResultSet userResult;
        ResultSet periodResult;
        ResultSet classResult,roomResult;
        int i = 0;
        while (result.next()) {
            if (result.getInt(7) == 0) {
                status = false;
            } else {
                status = true;
            }
            userResult = Utilfunctions.executeQuery("SELECT `name` FROM `user` WHERE `userCode`='" + result.getString(3) + "'");
            userResult.next();
            periodResult = Utilfunctions.executeQuery("SELECT `day` ,`timeFrom` ,`timeTo` FROM `periodconfig` WHERE `pconfigId`=" + result.getString(4));
            periodResult.next();
            classResult = Utilfunctions.executeQuery("SELECT `roomId`,`year`,`section` FROM `class` WHERE `classCode`='" + result.getString(5) + "'");
            classResult.next();
            roomResult = Utilfunctions.executeQuery("select roomNo from classroom where roomId='"+classResult.getString(1)+"'");
            roomResult.next();
            Object[] values = {userResult.getString(1), classResult.getString(2), classResult.getString(3), roomResult.getString(1), periodResult.getString(1), periodResult.getString(2), periodResult.getString(3), status};
            data[i] = values;
            issueIds[i++] = result.getInt(1);
            
        }

    }
        
    @Override
        public int getColumnCount() {
            return columnNames.length;
        }

    @Override
        public int getRowCount() {
            return data.length;
        }

    @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

    @Override
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
    @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
    @Override
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            if(col == 7) return true;
            else return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
    @Override
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
            
            String query = "UPDATE equipmentissue SET issueStatus = " + value + " WHERE issueId = " + issueIds[row];
            int n = Utilfunctions.executeUpdate(query);
            if(n >= 1) JOptionPane.showMessageDialog(null,"Equipment returned successfully");
        }
    }