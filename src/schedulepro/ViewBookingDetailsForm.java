/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package schedulepro;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Home
 */
public class ViewBookingDetailsForm extends javax.swing.JFrame {

    /**
     * Creates new form ViewBookingDetailsForm
     */
    public ViewBookingDetailsForm() throws SQLException {
        initComponents();
        bookingDetailsTable.setModel(new BookingDetailsTableModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookingDetailsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bookingDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        bookingDetailsTable.setShowHorizontalLines(false);
        bookingDetailsTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(bookingDetailsTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ViewBookingDetailsForm().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ViewBookingDetailsForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookingDetailsTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class BookingDetailsTableModel extends AbstractTableModel {

    private String[] columnNames = {"Name of the Bookie", "Year", "Section", "Room No.", "Day", "From", "To", "Status"};
    private Vector<String[]> data;
    private String status;

    public BookingDetailsTableModel() throws SQLException {
        ResultSet rs_cnt = Utilfunctions.executeQuery("SELECT COUNT(*) FROM `equipment` WHERE `equipId`=" + GlobalVars.equipmentId);
        rs_cnt.next();
        int cnt = rs_cnt.getInt(1);
        String query = "SELECT `userCode`,`pconfigId`,`classCode` ,`issueStatus` FROM `equipmentissue` WHERE `equipId`=" + GlobalVars.equipmentId;
        ResultSet result = Utilfunctions.executeQuery(query);
        data = new Vector<String[]>();
        ResultSet userResult;
        ResultSet periodResult;
        ResultSet classResult;
        int i = 0;
        while (result.next()) {
            if (Integer.parseInt(result.getString(4)) == 1) {
                status = "Pending";
            } else {
                status = "Recieved";
            }
            userResult = Utilfunctions.executeQuery("SELECT `name` FROM `user` WHERE `userCode`='" + result.getString(1) + "'");
            userResult.next();
            periodResult = Utilfunctions.executeQuery("SELECT `day` ,`timeFrom` ,`timeTo` FROM `periodconfig` WHERE `pconfigId`=" + result.getString(2));
            periodResult.next();
            classResult = Utilfunctions.executeQuery("SELECT `roomNo`,`year`,`section` FROM `class` WHERE `classCode`='" + result.getString(3) + "'");
            classResult.next();
            String[] values = {userResult.getString(1), classResult.getString(2), classResult.getString(3), classResult.getString(1), periodResult.getString(1), periodResult.getString(2), periodResult.getString(3), status};
            data.add(values);
        }
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public String getColumnName(int col) {
        return columnNames[col];
    }

    @Override
    public Object getValueAt(int row, int col) {
        return data.get(row)[col];
    }

    @Override
    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();

    }

    @Override
    public void setValueAt(Object value, int row, int column) {
        String values[] = data.get(row);
        values[column] = value.toString();
        data.setElementAt(values, row);
    }

    public void removeRow(int row) {
        data.remove(row);
        for (int i = 0; i < data.size(); i++) {
            System.out.println(data.get(i));
        }
        this.fireTableDataChanged();
    }
}
