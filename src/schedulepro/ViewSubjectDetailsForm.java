/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package schedulepro;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Home
 */
public class ViewSubjectDetailsForm extends javax.swing.JFrame {

    private int selectedRow;
    private int selectedColumn;

    /**
     * Creates new form ViewSubjectDetailsForm
     */
    public ViewSubjectDetailsForm() throws SQLException {
        initComponents();
        SubjectDetailsTable.setModel(new SubjectDetailsTableModel());
        SubjectDetailsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        SubjectDetailsTable.getColumnModel().getColumn(0).setPreferredWidth(85);
        SubjectDetailsTable.getColumnModel().getColumn(1).setPreferredWidth(500);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                DashboardForm df = new DashboardForm();
                Utilfunctions.setIconImage(df);
                Utilfunctions.setLocation(df);
                e.getWindow().setVisible(false);
                df.setVisible(true);

            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClickPopupMenu = new javax.swing.JPopupMenu();
        editSubjectCodeMenuItem = new javax.swing.JMenuItem();
        editSubjectNameMenuItem = new javax.swing.JMenuItem();
        editSubjectCreditsMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        SubjectDetailsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        editSubjectCodeMenuItem.setText("Edit Subject Code");
        editSubjectCodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSubjectCodeMenuItemActionPerformed(evt);
            }
        });
        rightClickPopupMenu.add(editSubjectCodeMenuItem);

        editSubjectNameMenuItem.setText("Edit Subject Name");
        editSubjectNameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSubjectNameMenuItemActionPerformed(evt);
            }
        });
        rightClickPopupMenu.add(editSubjectNameMenuItem);

        editSubjectCreditsMenuItem.setText("Edit Subject Credits");
        editSubjectCreditsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSubjectCreditsMenuItemActionPerformed(evt);
            }
        });
        rightClickPopupMenu.add(editSubjectCreditsMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SchedulePro - View Subjects");
        setResizable(false);

        SubjectDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        SubjectDetailsTable.setColumnSelectionAllowed(true);
        SubjectDetailsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SubjectDetailsTable.setInheritsPopupMenu(true);
        SubjectDetailsTable.setShowHorizontalLines(false);
        SubjectDetailsTable.setShowVerticalLines(false);
        SubjectDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SubjectDetailsTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(SubjectDetailsTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Subjects");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(240, 240, 240))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubjectDetailsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubjectDetailsTableMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            JTable source = (JTable) evt.getSource();
            selectedRow = source.rowAtPoint(evt.getPoint());
            selectedColumn = source.columnAtPoint(evt.getPoint());

            if (!source.isRowSelected(selectedRow)) {
                source.changeSelection(selectedRow, selectedColumn, false, false);
            }

            rightClickPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_SubjectDetailsTableMouseReleased

    private void editSubjectCodeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSubjectCodeMenuItemActionPerformed
        // TODO add your handling code here:
        String str = JOptionPane.showInputDialog("Subject Code:", SubjectDetailsTable.getValueAt(selectedRow, 0));
        if (!Validation.isalphanumericOrNull(str)) {
            JOptionPane.showMessageDialog(null, "subject Code should contain alphanumeric characters");
        } else {
            Utilfunctions.executeUpdate("UPDATE `subject` SET `subcode`='" + str + "' WHERE `subcode`='" + SubjectDetailsTable.getValueAt(selectedRow, 0) + "'");
            SubjectDetailsTable.setValueAt(str, selectedRow, 0);
        }
    }//GEN-LAST:event_editSubjectCodeMenuItemActionPerformed

    private void editSubjectNameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSubjectNameMenuItemActionPerformed
        // TODO add your handling code here:
        String str = JOptionPane.showInputDialog("Subject Name:", SubjectDetailsTable.getValueAt(selectedRow, 1));
        Utilfunctions.executeUpdate("UPDATE `subject` SET `subName`='" + str + "' WHERE `subcode`='" + SubjectDetailsTable.getValueAt(selectedRow, 0) + "'");
        SubjectDetailsTable.setValueAt(str, selectedRow, 1);
    }//GEN-LAST:event_editSubjectNameMenuItemActionPerformed

    private void editSubjectCreditsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSubjectCreditsMenuItemActionPerformed
        // TODO add your handling code here:
        String str = JOptionPane.showInputDialog("Subject Name:", SubjectDetailsTable.getValueAt(selectedRow, 2));
        int credit = Integer.parseInt(str);
        if (!Validation.isNumber(str) || credit <= 0 || credit >= 5) {
            JOptionPane.showMessageDialog(null, "Please Enter a numeric value from 0 - 5");
        } else {
            Utilfunctions.executeUpdate("UPDATE `subject` SET `credits`=" + str + " WHERE `subcode`='" + SubjectDetailsTable.getValueAt(selectedRow, 0) + "'");
            SubjectDetailsTable.setValueAt(str, selectedRow, 2);
        }
    }//GEN-LAST:event_editSubjectCreditsMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSubjectDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSubjectDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSubjectDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSubjectDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ViewSubjectDetailsForm().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ViewSubjectDetailsForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SubjectDetailsTable;
    private javax.swing.JMenuItem editSubjectCodeMenuItem;
    private javax.swing.JMenuItem editSubjectCreditsMenuItem;
    private javax.swing.JMenuItem editSubjectNameMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu rightClickPopupMenu;
    // End of variables declaration//GEN-END:variables
}

class SubjectDetailsTableModel extends AbstractTableModel {

    private String[] columnNames = {"Subject Code", "Subject Name", "Credits"};
    private Vector<String[]> data;

    public SubjectDetailsTableModel() throws SQLException {
        ResultSet rs_cnt = Utilfunctions.executeQuery("SELECT COUNT(*) FROM `subject`");
        rs_cnt.next();
        int cnt = rs_cnt.getInt(1);
        //String query = "SELECT `subcode`, `subName`, `dept`, `credits` FROM `subject` order by `subcode` asc";
        String query = "SELECT `subcode`, `subName`, `credits` FROM `subject` where `dept` = '" + LoginForm.userDept + "' order by `subcode` asc";
        ResultSet result = Utilfunctions.executeQuery(query);
        data = new Vector<String[]>();
        while (result.next()) {
            String[] values = {result.getString(1), result.getString(2), result.getString(3)};
            data.add(values);
        }

    }

    public void setColumnValue(int col, String[] values) {
        for (int i = 0; i < values.length; i++) {
            JOptionPane.showMessageDialog(null, values[i]);
            this.setValueAt(values[i], i, col);
        }
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public String getColumnName(int col) {
        return columnNames[col];
    }

    @Override
    public Object getValueAt(int row, int col) {
        return data.get(row)[col];
    }

    @Override
    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }

    @Override
    public void setValueAt(Object value, int row, int column) {
        String values[] = data.get(row);
        values[column] = value.toString();
        data.setElementAt(values, row);
    }

    public void removeRow(int row) {
        data.remove(row);
        for (int i = 0; i < data.size(); i++) {
            System.out.println(data.get(i));
        }
        this.fireTableDataChanged();
    }
}
